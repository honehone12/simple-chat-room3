// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: pb/chat_room.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LobyService_Room_FullMethodName = "/LobyService/Room"
)

// LobyServiceClient is the client API for LobyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobyServiceClient interface {
	Room(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomResponse, error)
}

type lobyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLobyServiceClient(cc grpc.ClientConnInterface) LobyServiceClient {
	return &lobyServiceClient{cc}
}

func (c *lobyServiceClient) Room(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, LobyService_Room_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobyServiceServer is the server API for LobyService service.
// All implementations must embed UnimplementedLobyServiceServer
// for forward compatibility
type LobyServiceServer interface {
	Room(context.Context, *RoomRequest) (*RoomResponse, error)
	mustEmbedUnimplementedLobyServiceServer()
}

// UnimplementedLobyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLobyServiceServer struct {
}

func (UnimplementedLobyServiceServer) Room(context.Context, *RoomRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Room not implemented")
}
func (UnimplementedLobyServiceServer) mustEmbedUnimplementedLobyServiceServer() {}

// UnsafeLobyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobyServiceServer will
// result in compilation errors.
type UnsafeLobyServiceServer interface {
	mustEmbedUnimplementedLobyServiceServer()
}

func RegisterLobyServiceServer(s grpc.ServiceRegistrar, srv LobyServiceServer) {
	s.RegisterService(&LobyService_ServiceDesc, srv)
}

func _LobyService_Room_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobyServiceServer).Room(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobyService_Room_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobyServiceServer).Room(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LobyService_ServiceDesc is the grpc.ServiceDesc for LobyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LobyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LobyService",
	HandlerType: (*LobyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Room",
			Handler:    _LobyService_Room_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/chat_room.proto",
}

const (
	ChatRoomService_Join_FullMethodName = "/ChatRoomService/Join"
	ChatRoomService_Chat_FullMethodName = "/ChatRoomService/Chat"
)

// ChatRoomServiceClient is the client API for ChatRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoomService_ChatClient, error)
}

type chatRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomServiceClient(cc grpc.ClientConnInterface) ChatRoomServiceClient {
	return &chatRoomServiceClient{cc}
}

func (c *chatRoomServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ChatRoomService_Join_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoomService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatRoomService_ServiceDesc.Streams[0], ChatRoomService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRoomServiceChatClient{stream}
	return x, nil
}

type ChatRoomService_ChatClient interface {
	Send(*ChatClientMsg) error
	Recv() (*ChatServerMsg, error)
	grpc.ClientStream
}

type chatRoomServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatRoomServiceChatClient) Send(m *ChatClientMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRoomServiceChatClient) Recv() (*ChatServerMsg, error) {
	m := new(ChatServerMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatRoomServiceServer is the server API for ChatRoomService service.
// All implementations must embed UnimplementedChatRoomServiceServer
// for forward compatibility
type ChatRoomServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Chat(ChatRoomService_ChatServer) error
	mustEmbedUnimplementedChatRoomServiceServer()
}

// UnimplementedChatRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomServiceServer struct {
}

func (UnimplementedChatRoomServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChatRoomServiceServer) Chat(ChatRoomService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatRoomServiceServer) mustEmbedUnimplementedChatRoomServiceServer() {}

// UnsafeChatRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomServiceServer will
// result in compilation errors.
type UnsafeChatRoomServiceServer interface {
	mustEmbedUnimplementedChatRoomServiceServer()
}

func RegisterChatRoomServiceServer(s grpc.ServiceRegistrar, srv ChatRoomServiceServer) {
	s.RegisterService(&ChatRoomService_ServiceDesc, srv)
}

func _ChatRoomService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRoomService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatRoomServiceServer).Chat(&chatRoomServiceChatServer{stream})
}

type ChatRoomService_ChatServer interface {
	Send(*ChatServerMsg) error
	Recv() (*ChatClientMsg, error)
	grpc.ServerStream
}

type chatRoomServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatRoomServiceChatServer) Send(m *ChatServerMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRoomServiceChatServer) Recv() (*ChatClientMsg, error) {
	m := new(ChatClientMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatRoomService_ServiceDesc is the grpc.ServiceDesc for ChatRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatRoomService",
	HandlerType: (*ChatRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _ChatRoomService_Join_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatRoomService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/chat_room.proto",
}
